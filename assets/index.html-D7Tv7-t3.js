import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a,o as n}from"./app-CfVq_rEW.js";const o={};function i(c,e){return n(),r("div",null,e[0]||(e[0]=[a('<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app），更重要的是容器性能开销极低。</p><h2 id="docker-的优势" tabindex="-1"><a class="header-anchor" href="#docker-的优势"><span>Docker 的优势</span></a></h2><ul><li>一致的运行环境：容器化确保应用在开发、测试和生产环境中运行一致</li><li>轻量级：容器共享主机操作系统内核，比虚拟机更轻量</li><li>可移植性：一次构建，到处运行，支持多平台部署</li><li>隔离性：容器之间相互隔离，避免依赖冲突</li><li>可扩展性：轻松实现水平扩展，适应业务增长</li><li>版本控制：镜像支持版本管理，便于回滚和迭代</li></ul><h2 id="docker-与虚拟机的区别" tabindex="-1"><a class="header-anchor" href="#docker-与虚拟机的区别"><span>Docker 与虚拟机的区别</span></a></h2><table><thead><tr><th style="text-align:center;">特性</th><th style="text-align:center;">Docker 容器</th><th style="text-align:center;">虚拟机</th></tr></thead><tbody><tr><td style="text-align:center;">启动时间</td><td style="text-align:center;">秒级</td><td style="text-align:center;">分钟级</td></tr><tr><td style="text-align:center;">资源占用</td><td style="text-align:center;">轻量（MB 级别）</td><td style="text-align:center;">重量级（GB 级别）</td></tr><tr><td style="text-align:center;">隔离级别</td><td style="text-align:center;">进程级隔离</td><td style="text-align:center;">完全隔离</td></tr><tr><td style="text-align:center;">操作系统</td><td style="text-align:center;">共享主机 OS 内核</td><td style="text-align:center;">完整 OS</td></tr><tr><td style="text-align:center;">性能</td><td style="text-align:center;">接近原生</td><td style="text-align:center;">有一定损耗</td></tr><tr><td style="text-align:center;">部署密度</td><td style="text-align:center;">高</td><td style="text-align:center;">低</td></tr></tbody></table><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><h2 id="镜像-image" tabindex="-1"><a class="header-anchor" href="#镜像-image"><span>镜像（Image）</span></a></h2><p>Docker 镜像是一个只读模板，包含运行应用所需的代码、运行时、库、环境变量和配置文件。例如，一个 Python 镜像包含了 Python 运行环境和必要的库。</p><h3 id="容器-container" tabindex="-1"><a class="header-anchor" href="#容器-container"><span>容器（Container）</span></a></h3><p>容器是镜像的可运行实例。可以把容器看作一个简易版的 Linux 环境（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p><h3 id="仓库-repository" tabindex="-1"><a class="header-anchor" href="#仓库-repository"><span>仓库（Repository）</span></a></h3><p>仓库是集中存放镜像文件的场所。Docker Hub 是最大的公共仓库，用户也可以搭建私有仓库。仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p><h3 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile</span></a></h3><p>Dockerfile 是一个文本文件，包含了构建 Docker 镜像所需的一系列指令。通过 docker build 命令可以根据 Dockerfile 生成镜像。</p><h3 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>Docker Compose</span></a></h3><p>Docker Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 YAML 文件配置应用的服务，然后使用单个命令创建和启动所有服务。</p>',16)]))}const s=t(o,[["render",i]]),p=JSON.parse('{"path":"/Docker/","title":"Docker 简介","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Docker 简介","description":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app），更重要的是容器性能开销极低。 Docker 的优势 一致的运行环境：容器化确保应用在开发、测试和生产环境中运行一致...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-31T06:33:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"slinjing\\",\\"url\\":\\"https://github.com/slinjing\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/docs-project/Docker/"}],["meta",{"property":"og:site_name","content":"主页"}],["meta",{"property":"og:title","content":"Docker 简介"}],["meta",{"property":"og:description","content":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app），更重要的是容器性能开销极低。 Docker 的优势 一致的运行环境：容器化确保应用在开发、测试和生产环境中运行一致..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-31T06:33:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-31T06:33:42.000Z"}]]},"git":{"createdTime":1753943622000,"updatedTime":1753943622000,"contributors":[{"name":"https://github.com/slinjing/slinjing.github.io.git","username":"","email":"878057672@qq.com","commits":1}]},"readingTime":{"minutes":1.98,"words":594},"filePathRelative":"Docker/README.md","autoDesc":true}');export{s as comp,p as data};
